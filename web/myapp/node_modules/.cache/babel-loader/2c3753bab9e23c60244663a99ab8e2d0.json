{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Desktop\\\\bysg\\\\web\\\\myapp\\\\src\\\\routes\\\\RouteWrapper.tsx\";\n\n/*\r\n * File: RouteWrapper.tsx\r\n * Desc: 描述\r\n * File Created: 2020-05-19 11:32:58\r\n * Author: chenghao at <hao.cheng@karakal.com.cn>\r\n * ------\r\n * Copyright 2020 - present, karakal\r\n */\nimport React, { useMemo } from 'react';\nimport DocumentTitle from 'react-document-title';\nimport queryString from 'query-string';\n\nconst RouteWrapper = props => {\n  let {\n    Comp,\n    route,\n    ...restProps\n  } = props;\n  /** useMemo 缓存query，避免每次生成生的query */\n\n  const queryMemo = useMemo(() => {\n    const queryReg = /\\?\\S*/g;\n\n    const matchQuery = reg => {\n      const queryParams = restProps.location.search.match(reg);\n      return queryParams ? queryParams[0] : '{}';\n    };\n\n    return queryString.parse(matchQuery(queryReg));\n  }, [restProps.location.search]);\n\n  const mergeQueryToProps = () => {\n    const queryReg = /\\?\\S*/g;\n\n    const removeQueryInRouter = (restProps, reg) => {\n      const {\n        params\n      } = restProps.match;\n      Object.keys(params).forEach(key => {\n        params[key] = params[key] && params[key].replace(reg, '');\n      });\n      restProps.match.params = { ...params\n      };\n    };\n\n    restProps = removeQueryInRouter(restProps, queryReg);\n    const merge = { ...restProps,\n      query: queryMemo\n    };\n    return merge;\n  };\n\n  return /*#__PURE__*/React.createElement(DocumentTitle, {\n    title: route.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Comp, Object.assign({}, mergeQueryToProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default RouteWrapper;","map":{"version":3,"sources":["C:/Users/asus/Desktop/bysg/web/myapp/src/routes/RouteWrapper.tsx"],"names":["React","useMemo","DocumentTitle","queryString","RouteWrapper","props","Comp","route","restProps","queryMemo","queryReg","matchQuery","reg","queryParams","location","search","match","parse","mergeQueryToProps","removeQueryInRouter","params","Object","keys","forEach","key","replace","merge","query","title"],"mappings":";;AAAA;;;;;;;;AAQA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,WAAP,MAAwB,cAAxB;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAgB;AACjC,MAAI;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAe,OAAGC;AAAlB,MAAgCH,KAApC;AACA;;AACA,QAAMI,SAAS,GAAGR,OAAO,CAAC,MAAM;AAC5B,UAAMS,QAAQ,GAAG,QAAjB;;AACA,UAAMC,UAAU,GAAIC,GAAD,IAAiB;AAChC,YAAMC,WAAW,GAAGL,SAAS,CAACM,QAAV,CAAmBC,MAAnB,CAA0BC,KAA1B,CAAgCJ,GAAhC,CAApB;AACA,aAAOC,WAAW,GAAGA,WAAW,CAAC,CAAD,CAAd,GAAoB,IAAtC;AACH,KAHD;;AAIA,WAAOV,WAAW,CAACc,KAAZ,CAAkBN,UAAU,CAACD,QAAD,CAA5B,CAAP;AACH,GAPwB,EAOtB,CAACF,SAAS,CAACM,QAAV,CAAmBC,MAApB,CAPsB,CAAzB;;AAQA,QAAMG,iBAAiB,GAAG,MAAM;AAC5B,UAAMR,QAAQ,GAAG,QAAjB;;AACA,UAAMS,mBAAmB,GAAG,CAACX,SAAD,EAAiBI,GAAjB,KAAiC;AACzD,YAAM;AAAEQ,QAAAA;AAAF,UAAaZ,SAAS,CAACQ,KAA7B;AACAK,MAAAA,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA6BC,GAAD,IAAS;AACjCJ,QAAAA,MAAM,CAACI,GAAD,CAAN,GAAcJ,MAAM,CAACI,GAAD,CAAN,IAAeJ,MAAM,CAACI,GAAD,CAAN,CAAYC,OAAZ,CAAoBb,GAApB,EAAyB,EAAzB,CAA7B;AACH,OAFD;AAGAJ,MAAAA,SAAS,CAACQ,KAAV,CAAgBI,MAAhB,GAAyB,EAAE,GAAGA;AAAL,OAAzB;AACH,KAND;;AAQAZ,IAAAA,SAAS,GAAGW,mBAAmB,CAACX,SAAD,EAAYE,QAAZ,CAA/B;AACA,UAAMgB,KAAK,GAAG,EACV,GAAGlB,SADO;AAEVmB,MAAAA,KAAK,EAAElB;AAFG,KAAd;AAIA,WAAOiB,KAAP;AACH,GAhBD;;AAiBA,sBACI,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEnB,KAAK,CAACqB,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD,oBAAUV,iBAAiB,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,CADJ;AAKH,CAjCD;;AAmCA,eAAed,YAAf","sourcesContent":["/*\r\n * File: RouteWrapper.tsx\r\n * Desc: 描述\r\n * File Created: 2020-05-19 11:32:58\r\n * Author: chenghao at <hao.cheng@karakal.com.cn>\r\n * ------\r\n * Copyright 2020 - present, karakal\r\n */\r\nimport React, { useMemo } from 'react';\r\nimport DocumentTitle from 'react-document-title';\r\nimport queryString from 'query-string';\r\n\r\nconst RouteWrapper = (props: any) => {\r\n    let { Comp, route, ...restProps } = props;\r\n    /** useMemo 缓存query，避免每次生成生的query */\r\n    const queryMemo = useMemo(() => {\r\n        const queryReg = /\\?\\S*/g;\r\n        const matchQuery = (reg: RegExp) => {\r\n            const queryParams = restProps.location.search.match(reg);\r\n            return queryParams ? queryParams[0] : '{}';\r\n        };\r\n        return queryString.parse(matchQuery(queryReg));\r\n    }, [restProps.location.search]);\r\n    const mergeQueryToProps = () => {\r\n        const queryReg = /\\?\\S*/g;\r\n        const removeQueryInRouter = (restProps: any, reg: RegExp) => {\r\n            const { params } = restProps.match;\r\n            Object.keys(params).forEach((key) => {\r\n                params[key] = params[key] && params[key].replace(reg, '');\r\n            });\r\n            restProps.match.params = { ...params };\r\n        };\r\n\r\n        restProps = removeQueryInRouter(restProps, queryReg);\r\n        const merge = {\r\n            ...restProps,\r\n            query: queryMemo,\r\n        };\r\n        return merge;\r\n    };\r\n    return (\r\n        <DocumentTitle title={route.title}>\r\n            <Comp {...mergeQueryToProps()} />\r\n        </DocumentTitle>\r\n    );\r\n};\r\n\r\nexport default RouteWrapper;\r\n"]},"metadata":{},"sourceType":"module"}