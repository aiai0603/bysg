{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/checkbox/style\";\nimport _Checkbox from \"antd/lib/checkbox\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/notification/style\";\nimport _notification from \"antd/lib/notification\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar _jsxFileName = \"C:\\\\Users\\\\asus\\\\Desktop\\\\bysg\\\\web\\\\myapp\\\\src\\\\components\\\\pages\\\\Login.tsx\";\n\n/**\r\n * Created by hao.cheng on 2017/4/16.\r\n */\nimport React from 'react';\nimport { PwaInstaller } from '../widget';\nimport { connectAlita } from 'redux-alita';\nimport umbrella from 'umbrella-storage';\nimport { post } from '../../service/tools';\nconst FormItem = _Form.Item;\n\nclass Login extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        const {\n          setAlitaState\n        } = this.props;\n        post({\n          url: 'http://localhost:8080/admin/login',\n          data: {\n            username: values.userName,\n            password: values.password\n          }\n        }).then(res => {\n          if (res.rspCode !== \"200\") {\n            _notification.open({\n              message: res.rspMsg\n            });\n          } else {\n            if (res.data === 1) setAlitaState({\n              funcName: \"admin\",\n              stateName: 'auth'\n            });else setAlitaState({\n              funcName: \"guest\",\n              stateName: 'auth'\n            });\n\n            _notification.open({\n              message: res.rspMsg\n            });\n          }\n        });\n      });\n    };\n\n    this.gitHub = () => {\n      window.location.href = 'https://github.com/login/oauth/authorize?client_id=792cdcd244e98dcd2dee&redirect_uri=http://localhost:3006/&scope=user&state=reactAdmin';\n    };\n  }\n\n  componentDidMount() {\n    const {\n      setAlitaState\n    } = this.props;\n    setAlitaState({\n      stateName: 'auth',\n      data: null\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    // React 16.3+弃用componentWillReceiveProps\n    const {\n      auth: nextAuth = {},\n      history\n    } = this.props; // const { history } = this.props;\n\n    if (nextAuth.data && nextAuth.data.uid) {\n      // 判断是否登陆\n      umbrella.setLocalStorage('user', nextAuth.data);\n      history.push('/');\n    }\n  }\n\n  render() {\n    const {\n      getFieldDecorator\n    } = this.props.form;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login-logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }\n    }, \"React Admin\"), /*#__PURE__*/React.createElement(PwaInstaller, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(_Form, {\n      onSubmit: this.handleSubmit,\n      style: {\n        maxWidth: '300px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }, getFieldDecorator('userName', {\n      rules: [{\n        required: true,\n        message: '请输入用户名!'\n      }]\n    })( /*#__PURE__*/React.createElement(_Input, {\n      prefix: /*#__PURE__*/React.createElement(_Icon, {\n        type: \"user\",\n        style: {\n          fontSize: 13\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 45\n        }\n      }),\n      placeholder: \"\\u7BA1\\u7406\\u5458\\u8F93\\u5165admin, \\u6E38\\u5BA2\\u8F93\\u5165guest\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(FormItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: '请输入密码!'\n      }]\n    })( /*#__PURE__*/React.createElement(_Input, {\n      prefix: /*#__PURE__*/React.createElement(_Icon, {\n        type: \"lock\",\n        style: {\n          fontSize: 13\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 45\n        }\n      }),\n      type: \"password\",\n      placeholder: \"\\u7BA1\\u7406\\u5458\\u8F93\\u5165admin, \\u6E38\\u5BA2\\u8F93\\u5165guest\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(FormItem, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    }, getFieldDecorator('remember', {\n      valuePropName: 'checked',\n      initialValue: true\n    })( /*#__PURE__*/React.createElement(_Checkbox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 32\n      }\n    }, \"\\u8BB0\\u4F4F\\u6211\")), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"login-form-forgot\",\n      style: {\n        float: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 29\n      }\n    }, \"\\u5FD8\\u8BB0\\u5BC6\\u7801\"), /*#__PURE__*/React.createElement(_Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      className: \"login-form-button\",\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 29\n      }\n    }, \"\\u767B\\u5F55\"), /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'space-between'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 33\n      }\n    }, \"\\u6216 \\u73B0\\u5728\\u5C31\\u53BB\\u6CE8\\u518C!\"), /*#__PURE__*/React.createElement(\"span\", {\n      onClick: this.gitHub,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(_Icon, {\n      type: \"github\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 37\n      }\n    }), \"(\\u7B2C\\u4E09\\u65B9\\u767B\\u5F55)\"))))));\n  }\n\n}\n\nexport default connectAlita(['auth'])(_Form.create()(Login));","map":{"version":3,"sources":["C:/Users/asus/Desktop/bysg/web/myapp/src/components/pages/Login.tsx"],"names":["React","PwaInstaller","connectAlita","umbrella","post","FormItem","Item","Login","Component","handleSubmit","e","preventDefault","props","form","validateFields","err","values","setAlitaState","url","data","username","userName","password","then","res","rspCode","open","message","rspMsg","funcName","stateName","gitHub","window","location","href","componentDidMount","componentDidUpdate","prevProps","auth","nextAuth","history","uid","setLocalStorage","push","render","getFieldDecorator","maxWidth","rules","required","fontSize","valuePropName","initialValue","float","width","display","justifyContent","create"],"mappings":"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","sourcesContent":["/**\r\n * Created by hao.cheng on 2017/4/16.\r\n */\r\nimport React from 'react';\r\nimport { Form, Icon, Input, Button, Checkbox,notification } from 'antd';\r\nimport { PwaInstaller } from '../widget';\r\nimport { connectAlita } from 'redux-alita';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { FormProps } from 'antd/lib/form';\r\nimport umbrella from 'umbrella-storage';\r\nimport { get, post } from '../../service/tools';\r\n\r\nconst FormItem = Form.Item;\r\ntype LoginProps = {\r\n    setAlitaState: (param: any) => void;\r\n    auth: any;\r\n} & RouteComponentProps &\r\n    FormProps;\r\nclass Login extends React.Component<LoginProps> {\r\n    componentDidMount() {\r\n        const { setAlitaState } = this.props;\r\n        setAlitaState({ stateName: 'auth', data: null });\r\n    }\r\n    componentDidUpdate(prevProps: LoginProps) {\r\n        // React 16.3+弃用componentWillReceiveProps\r\n        const { auth: nextAuth = {}, history } = this.props;\r\n        // const { history } = this.props;\r\n        if (nextAuth.data && nextAuth.data.uid) {\r\n            // 判断是否登陆\r\n            umbrella.setLocalStorage('user', nextAuth.data);\r\n            history.push('/');\r\n        }\r\n    }\r\n    handleSubmit = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        this.props.form!.validateFields((err, values) => {\r\n            const { setAlitaState }  = this.props\r\n            post({\r\n                url: 'http://localhost:8080/admin/login',\r\n                data: {\r\n                    username:values.userName,\r\n                    password:values.password\r\n                },\r\n            }).then(res=>{\r\n                if(res.rspCode !== \"200\"){\r\n                    notification.open({\r\n                        message: res.rspMsg,\r\n                      });\r\n    \r\n                }else {\r\n                    if(res.data === 1)\r\n                        setAlitaState ({ funcName: \"admin\", stateName: 'auth' });\r\n                    else\r\n                        setAlitaState({ funcName: \"guest\", stateName: 'auth' });\r\n    \r\n                    notification.open({\r\n                        message: res.rspMsg,\r\n                        \r\n                      });\r\n    \r\n                }\r\n            })\r\n          \r\n        });\r\n    };\r\n    gitHub = () => {\r\n        window.location.href =\r\n            'https://github.com/login/oauth/authorize?client_id=792cdcd244e98dcd2dee&redirect_uri=http://localhost:3006/&scope=user&state=reactAdmin';\r\n    };\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form!;\r\n        return (\r\n            <div className=\"login\">\r\n                <div className=\"login-form\">\r\n                    <div className=\"login-logo\">\r\n                        <span>React Admin</span>\r\n                        <PwaInstaller />\r\n                    </div>\r\n                    <Form onSubmit={this.handleSubmit} style={{ maxWidth: '300px' }}>\r\n                        <FormItem>\r\n                            {getFieldDecorator('userName', {\r\n                                rules: [{ required: true, message: '请输入用户名!' }],\r\n                            })(\r\n                                <Input\r\n                                    prefix={<Icon type=\"user\" style={{ fontSize: 13 }} />}\r\n                                    placeholder=\"管理员输入admin, 游客输入guest\"\r\n                                />\r\n                            )}\r\n                        </FormItem>\r\n                        <FormItem>\r\n                            {getFieldDecorator('password', {\r\n                                rules: [{ required: true, message: '请输入密码!' }],\r\n                            })(\r\n                                <Input\r\n                                    prefix={<Icon type=\"lock\" style={{ fontSize: 13 }} />}\r\n                                    type=\"password\"\r\n                                    placeholder=\"管理员输入admin, 游客输入guest\"\r\n                                />\r\n                            )}\r\n                        </FormItem>\r\n                        <FormItem>\r\n                            {getFieldDecorator('remember', {\r\n                                valuePropName: 'checked',\r\n                                initialValue: true,\r\n                            })(<Checkbox>记住我</Checkbox>)}\r\n                            <span className=\"login-form-forgot\" style={{ float: 'right' }}>\r\n                                忘记密码\r\n                            </span>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                className=\"login-form-button\"\r\n                                style={{ width: '100%' }}\r\n                            >\r\n                                登录\r\n                            </Button>\r\n                            <p style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                <span>或 现在就去注册!</span>\r\n                                <span onClick={this.gitHub}>\r\n                                    <Icon type=\"github\" />\r\n                                    (第三方登录)\r\n                                </span>\r\n                            </p>\r\n                        </FormItem>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connectAlita(['auth'])(Form.create()(Login));\r\n"]},"metadata":{},"sourceType":"module"}