{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('react-redux'), require('redux'), require('redux-thunk')) : typeof define === 'function' && define.amd ? define(['exports', 'react', 'react-redux', 'redux', 'redux-thunk'], factory) : (global = global || self, factory(global.howLongUntilLunch = {}, global.React, global.reactRedux, global.redux, global.thunk));\n})(this, function (exports, React, reactRedux, redux, thunk) {\n  'use strict';\n\n  var React__default = 'default' in React ? React['default'] : React;\n  thunk = thunk && Object.prototype.hasOwnProperty.call(thunk, 'default') ? thunk['default'] : thunk;\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n      _typeof = function (obj) {\n        return typeof obj;\n      };\n    } else {\n      _typeof = function (obj) {\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n      };\n    }\n\n    return _typeof(obj);\n  }\n\n  function _defineProperty(obj, key, value) {\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n\n    return obj;\n  }\n\n  function ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(object);\n      if (enumerableOnly) symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n      keys.push.apply(keys, symbols);\n    }\n\n    return keys;\n  }\n\n  function _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i] != null ? arguments[i] : {};\n\n      if (i % 2) {\n        ownKeys(Object(source), true).forEach(function (key) {\n          _defineProperty(target, key, source[key]);\n        });\n      } else if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n\n    return target;\n  }\n\n  function _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n  }\n\n  function _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n  }\n\n  function _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n  }\n\n  function _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  /*\r\n   * File: type.js\r\n   * Desc: 描述\r\n   * File Created: 2019-03-18 00:22:03\r\n   * Author: chenghao\r\n   * ------\r\n   * Copyright 2019 - present, chenghao\r\n   */\n\n\n  var REQUEST_DATA = 'REQUEST_DATA';\n  var RECEIVE_DATA = 'RECEIVE_DATA';\n  /**\r\n   * 初始化state\r\n   * @param {*} param0.isFetching 是否获取中的状态\r\n   * @param {*} param0.data 初始的数据值\r\n   */\n\n  var initialState = function initialState() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$isFetching = _ref.isFetching,\n        isFetching = _ref$isFetching === void 0 ? true : _ref$isFetching,\n        _ref$data = _ref.data,\n        data = _ref$data === void 0 ? {} : _ref$data;\n\n    return {\n      isFetching: isFetching,\n      data: data\n    };\n  };\n  /**\r\n   * 统一处数据\r\n   * @param {*} state\r\n   * @param {*} action\r\n   */\n\n\n  var handleData = function handleData() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState();\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    switch (action.type) {\n      case REQUEST_DATA:\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          isFetching: true\n        });\n\n      case RECEIVE_DATA:\n        return _objectSpread2(_objectSpread2({}, state), {}, {\n          isFetching: false,\n          data: action.data,\n          timeStamp: Date.now()\n        });\n\n      default:\n        return _objectSpread2({}, state);\n    }\n  };\n\n  var alitaState = function alitaState() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n\n    switch (action.type) {\n      case RECEIVE_DATA:\n      case REQUEST_DATA:\n        return _objectSpread2(_objectSpread2({}, state), {}, _defineProperty({}, action.category, handleData(state[action.category], action)));\n\n      default:\n        return _objectSpread2({}, state);\n    }\n  };\n\n  var reducer = redux.combineReducers({\n    alitaState: alitaState\n  });\n  /*\r\n   * File: Provider\r\n   * Desc: redux provider\r\n   * File Created: 2019-03-18 00:40:01\r\n   * Author: chenghao\r\n   * ------\r\n   * Copyright 2019 - present, chenghao\r\n   */\n\n  var middleware = [thunk];\n  var store = redux.createStore(reducer, redux.applyMiddleware.apply(void 0, middleware));\n\n  var Provider = function (_ref) {\n    var children = _ref.children;\n    return /*#__PURE__*/React__default.createElement(reactRedux.Provider, {\n      store: store\n    }, children);\n  };\n\n  var funcs;\n  /**\r\n   * 注册接口请求api函数\r\n   * @param {*} apis\r\n   */\n\n  var setConfig = function setConfig(apis) {\n    return funcs = apis;\n  };\n\n  var requestData = function requestData(category) {\n    return {\n      type: REQUEST_DATA,\n      category: category\n    };\n  };\n\n  var receiveData = function receiveData(data, category) {\n    return {\n      type: RECEIVE_DATA,\n      data: data,\n      category: category\n    };\n  };\n  /**\r\n   * 请求数据调用方法\r\n   * @param option1 以下對象\r\n   * @param funcName      请求接口的函数名\r\n   * @param params        请求接口的参数\r\n   * @param stateName     state的名称\r\n   * @param data          非异步请求时state的值\r\n   * @param option2 非异步请求时state的值\r\n   *\r\n   * stateName 为空时，默认设置为api函数的名称\r\n   */\n\n\n  var setAlitaState = function setAlitaState(option1, option2) {\n    return function (dispatch) {\n      var funcName, params, stateName, data;\n\n      if (_typeof(option1) === 'object') {\n        funcName = option1.funcName;\n        params = option1.params;\n        var _option1$stateName = option1.stateName;\n        stateName = _option1$stateName === void 0 ? funcName : _option1$stateName;\n        data = option1.data;\n      }\n\n      if (typeof option1 === 'string') {\n        stateName = option1;\n      }\n\n      if (option2) {\n        data = option2;\n      } // 非异步请求的处理\n\n\n      if (!funcName && stateName) return dispatch(receiveData(data, stateName)); // 异步请求的处理\n\n      dispatch(requestData(stateName));\n      return funcs[funcName](params).then(function (res) {\n        return dispatch(receiveData(res, stateName));\n      });\n    };\n  };\n  /**\r\n   * transform state common\r\n   * @param {*} alitaState\r\n   * @param {*} alitaStateKeys\r\n   */\n\n\n  function transformState(alitaState, alitaStateKeys) {\n    // 默认返回整个数据对象\n    if (!alitaStateKeys) return {\n      alitaState: alitaState\n    };\n    var _transferObj = {};\n    alitaStateKeys.forEach(function (key) {\n      if (Object.prototype.toString.call(key) === '[object String]') {\n        // alitaState[key] && (_transferObj[key] = alitaState[key]);\n        _transferObj[key] = alitaState[key] || {\n          isFetching: false,\n          data: void 0\n        };\n      }\n\n      if (Object.prototype.toString.call(key) === '[object Object]') {\n        var _realKey = Object.keys(key)[0];\n        var _initialVal = key[_realKey];\n        _transferObj[_realKey] = !alitaState[_realKey] ? initialState({\n          isFetching: false,\n          data: _initialVal\n        }) : alitaState[_realKey];\n      }\n    });\n    return _objectSpread2({}, _transferObj);\n  }\n  /**\r\n   * 返回简洁的对象\r\n   * @param {*} alitaState\r\n   * @param {*} alitaStateKeys\r\n   */\n\n\n  function transformStateLight(alitaState, alitaStateKeys) {\n    var state = transformState(alitaState, alitaStateKeys);\n    return Object.keys(state).reduce(function (prev, curr) {\n      prev = _objectSpread2(_objectSpread2({}, prev), {}, _defineProperty({}, curr, state[curr].data));\n      return prev;\n    }, {});\n  }\n\n  var mapStateToProps = function mapStateToProps(_ref, alitaStateKeys) {\n    var alitaState = _ref.alitaState;\n    return transformState(alitaState, alitaStateKeys);\n  };\n\n  var mapDispatchToProps = function mapDispatchToProps(dispatch) {\n    return {\n      setAlitaState: redux.bindActionCreators(setAlitaState, dispatch)\n    };\n  };\n\n  var index = function (alitaStateKeys) {\n    return reactRedux.connect(function (state) {\n      return mapStateToProps(state, alitaStateKeys);\n    }, mapDispatchToProps);\n  };\n  /**\r\n   * alitaCreator - set alita state\r\n   */\n\n\n  function useAlitaCreator() {\n    var dispatch = reactRedux.useDispatch();\n    return React.useCallback(function (data, state) {\n      return redux.bindActionCreators(setAlitaState.bind(null, data, state), dispatch)();\n    }, [dispatch]);\n  }\n  /**\r\n   * get alita state from redux\r\n   * @param {*} alitaStateKeys keys - extract alita single data\r\n   * @example\r\n   * eg: const { alita } = useAlitaState([{ alita: '测试' }]);\r\n   * alita = { isFetching: false, data: '测试', timeStamp: xxx }\r\n   */\n\n\n  function useAlitaState(alitaStateKeys) {\n    return reactRedux.useSelector(function (_ref) {\n      var alitaState = _ref.alitaState;\n      return transformState(alitaState, alitaStateKeys);\n    }, reactRedux.shallowEqual);\n  }\n  /**\r\n   * 获取简洁的alita对象\r\n   * @param {*} alitaStateKeys\r\n   * @example\r\n   * eg: const { alita } = useAlitaStateLight([{ alita: '测试' }]);\r\n   * alita = '测试'\r\n   */\n\n\n  function useAlitaStateLight(alitaStateKeys) {\n    return reactRedux.useSelector(function (_ref2) {\n      var alitaState = _ref2.alitaState;\n      return transformStateLight(alitaState, alitaStateKeys);\n    }, reactRedux.shallowEqual);\n  }\n  /**\r\n   * 校验options\r\n   * @param {*} options\r\n   */\n\n\n  function validateOptions(options) {\n    var keys = ['light'];\n    return keys.some(function (key) {\n      return options.hasOwnProperty(key);\n    });\n  }\n  /**\r\n   *\r\n   * @param  {...any} args\r\n   * @example\r\n   * args 可以传两个参数\r\n   * 1\r\n   */\n\n\n  function useAlita() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var options = args.slice(args.length - 1)[0];\n    options = validateOptions(options) ? options : null;\n    var stateKeys = options ? args.slice(0, args.length - 1) : args;\n    var setAlita = useAlitaCreator();\n    var alitaState = options && options.light ? useAlitaStateLight(stateKeys) : useAlitaState(stateKeys);\n    return [].concat(_toConsumableArray(Object.keys(alitaState).map(function (key) {\n      return alitaState[key];\n    })), [setAlita]);\n  }\n\n  exports.AlitaProvider = Provider;\n  exports.connectAlita = index;\n  exports.setAlitaState = setAlitaState;\n  exports.setConfig = setConfig;\n  exports.useAlita = useAlita;\n  exports.useAlitaCreator = useAlitaCreator;\n  exports.useAlitaState = useAlitaState;\n  exports.useAlitaStateLight = useAlitaStateLight;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}