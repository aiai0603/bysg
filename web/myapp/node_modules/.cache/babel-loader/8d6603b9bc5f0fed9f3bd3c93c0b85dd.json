{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/popconfirm/style\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/input-number/style\";\nimport _InputNumber from \"antd/lib/input-number\";\nimport \"antd/lib/form/style\";\nimport _Form from \"antd/lib/form\";\nvar _jsxFileName = \"C:\\\\Users\\\\asus\\\\Desktop\\\\bysg\\\\web\\\\myapp\\\\src\\\\components\\\\tables\\\\EditableTable.tsx\";\n\n/**\r\n * Created by hao.cheng on 2017/4/16.\r\n */\nimport React from 'react';\nconst data = [];\n\nfor (let i = 0; i < 100; i++) {\n  data.push({\n    key: i.toString(),\n    name: `Edrward ${i}`,\n    age: 32,\n    address: `London Park no. ${i}`\n  });\n}\n\nconst FormItem = _Form.Item;\nconst EditableContext = React.createContext({});\n\nconst EditableRow = ({\n  form,\n  index,\n  ...props\n}) => /*#__PURE__*/React.createElement(EditableContext.Provider, {\n  value: form,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }\n})));\n\nconst EditableFormRow = _Form.create()(EditableRow);\n\nclass EditableCell extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getInput = () => {\n      if (this.props.inputType === 'number') {\n        return /*#__PURE__*/React.createElement(_InputNumber, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 20\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(_Input, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 16\n        }\n      });\n    };\n  }\n\n  render() {\n    const {\n      editing,\n      dataIndex,\n      title,\n      inputType,\n      record,\n      index,\n      ...restProps\n    } = this.props;\n    return /*#__PURE__*/React.createElement(EditableContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, form => {\n      const {\n        getFieldDecorator\n      } = form;\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, restProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }\n      }), editing ? /*#__PURE__*/React.createElement(FormItem, {\n        style: {\n          margin: 0\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 33\n        }\n      }, getFieldDecorator(dataIndex, {\n        rules: [{\n          required: true,\n          message: `Please Input ${title}!`\n        }],\n        initialValue: record[dataIndex]\n      })(this.getInput())) : restProps.children);\n    });\n  }\n\n}\n\nexport default class EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.columns = void 0;\n\n    this.isEditing = record => {\n      return record.key === this.state.editingKey;\n    };\n\n    this.cancel = () => {\n      this.setState({\n        editingKey: ''\n      });\n    };\n\n    this.state = {\n      data,\n      editingKey: ''\n    };\n    this.columns = [{\n      title: 'name',\n      dataIndex: 'name',\n      width: '25%',\n      editable: true\n    }, {\n      title: 'age',\n      dataIndex: 'age',\n      width: '15%',\n      editable: true\n    }, {\n      title: 'address',\n      dataIndex: 'address',\n      width: '40%',\n      editable: true\n    }, {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (text, record) => {\n        const editable = this.isEditing(record);\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }\n        }, editable ? /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(EditableContext.Consumer, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 37\n          }\n        }, form => /*#__PURE__*/React.createElement(_Button, {\n          onClick: () => this.save(form, record.key),\n          style: {\n            marginRight: 8\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 45\n          }\n        }, \"Save\")), /*#__PURE__*/React.createElement(_Popconfirm, {\n          title: \"Sure to cancel?\",\n          onConfirm: () => this.cancel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(_Button, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 41\n          }\n        }, \"Cancel\"))) : /*#__PURE__*/React.createElement(_Button, {\n          onClick: () => this.edit(record.key),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 33\n          }\n        }, \"Edit\"));\n      }\n    }];\n  }\n\n  edit(key) {\n    this.setState({\n      editingKey: key\n    });\n  }\n\n  save(form, key) {\n    form.validateFields((error, row) => {\n      if (error) {\n        return;\n      }\n\n      const newData = [...this.state.data];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, { ...item,\n          ...row\n        });\n        this.setState({\n          data: newData,\n          editingKey: ''\n        });\n      } else {\n        newData.push(data);\n        this.setState({\n          data: newData,\n          editingKey: ''\n        });\n      }\n    });\n  }\n\n  render() {\n    const components = {\n      body: {\n        row: EditableFormRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return { ...col,\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex === 'age' ? 'number' : 'text',\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record)\n        })\n      };\n    });\n    return /*#__PURE__*/React.createElement(_Table, {\n      components: components,\n      bordered: true,\n      dataSource: this.state.data,\n      columns: columns,\n      rowClassName: (record, index) => 'editable-row',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/asus/Desktop/bysg/web/myapp/src/components/tables/EditableTable.tsx"],"names":["React","data","i","push","key","toString","name","age","address","FormItem","Item","EditableContext","createContext","EditableRow","form","index","props","EditableFormRow","create","EditableCell","Component","getInput","inputType","render","editing","dataIndex","title","record","restProps","getFieldDecorator","margin","rules","required","message","initialValue","children","EditableTable","constructor","columns","isEditing","state","editingKey","cancel","setState","width","editable","text","save","marginRight","edit","validateFields","error","row","newData","findIndex","item","splice","components","body","cell","map","col","onCell"],"mappings":"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","sourcesContent":["/**\r\n * Created by hao.cheng on 2017/4/16.\r\n */\r\n\r\nimport React from 'react';\r\nimport { Table, Input, InputNumber, Popconfirm, Form, Button } from 'antd';\r\n\r\nconst data: any[] = [];\r\nfor (let i = 0; i < 100; i++) {\r\n    data.push({\r\n        key: i.toString(),\r\n        name: `Edrward ${i}`,\r\n        age: 32,\r\n        address: `London Park no. ${i}`,\r\n    });\r\n}\r\nconst FormItem = Form.Item;\r\nconst EditableContext = React.createContext({});\r\n\r\ntype EditableRowProps = {\r\n    form: any;\r\n    index: any;\r\n};\r\nconst EditableRow = ({ form, index, ...props }: EditableRowProps) => (\r\n    <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n    </EditableContext.Provider>\r\n);\r\n\r\nconst EditableFormRow = Form.create()(EditableRow);\r\ntype EditableCellProps = {\r\n    inputType: string;\r\n    editing: boolean;\r\n    dataIndex: number;\r\n    title: string;\r\n    record: any;\r\n    index: number;\r\n};\r\nclass EditableCell extends React.Component<EditableCellProps> {\r\n    getInput = () => {\r\n        if (this.props.inputType === 'number') {\r\n            return <InputNumber />;\r\n        }\r\n        return <Input />;\r\n    };\r\n    render() {\r\n        const { editing, dataIndex, title, inputType, record, index, ...restProps } = this.props;\r\n        return (\r\n            <EditableContext.Consumer>\r\n                {(form: any) => {\r\n                    const { getFieldDecorator } = form;\r\n                    return (\r\n                        <td {...restProps}>\r\n                            {editing ? (\r\n                                <FormItem style={{ margin: 0 }}>\r\n                                    {getFieldDecorator(dataIndex, {\r\n                                        rules: [\r\n                                            {\r\n                                                required: true,\r\n                                                message: `Please Input ${title}!`,\r\n                                            },\r\n                                        ],\r\n                                        initialValue: record[dataIndex],\r\n                                    })(this.getInput())}\r\n                                </FormItem>\r\n                            ) : (\r\n                                restProps.children\r\n                            )}\r\n                        </td>\r\n                    );\r\n                }}\r\n            </EditableContext.Consumer>\r\n        );\r\n    }\r\n}\r\n\r\ntype EditableTableProps = {};\r\ntype EditableTableState = {\r\n    data: any;\r\n    editingKey: string;\r\n};\r\nexport default class EditableTable extends React.Component<EditableTableProps, EditableTableState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = { data, editingKey: '' };\r\n        this.columns = [\r\n            {\r\n                title: 'name',\r\n                dataIndex: 'name',\r\n                width: '25%',\r\n                editable: true,\r\n            },\r\n            {\r\n                title: 'age',\r\n                dataIndex: 'age',\r\n                width: '15%',\r\n                editable: true,\r\n            },\r\n            {\r\n                title: 'address',\r\n                dataIndex: 'address',\r\n                width: '40%',\r\n                editable: true,\r\n            },\r\n            {\r\n                title: 'operation',\r\n                dataIndex: 'operation',\r\n                render: (text: any, record: any) => {\r\n                    const editable = this.isEditing(record);\r\n                    return (\r\n                        <div>\r\n                            {editable ? (\r\n                                <span>\r\n                                    <EditableContext.Consumer>\r\n                                        {(form: any) => (\r\n                                            <Button\r\n                                                onClick={() => this.save(form, record.key)}\r\n                                                style={{ marginRight: 8 }}\r\n                                            >\r\n                                                Save\r\n                                            </Button>\r\n                                        )}\r\n                                    </EditableContext.Consumer>\r\n                                    <Popconfirm\r\n                                        title=\"Sure to cancel?\"\r\n                                        onConfirm={() => this.cancel()}\r\n                                    >\r\n                                        <Button>Cancel</Button>\r\n                                    </Popconfirm>\r\n                                </span>\r\n                            ) : (\r\n                                <Button onClick={() => this.edit(record.key)}>Edit</Button>\r\n                            )}\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n        ];\r\n    }\r\n    columns: any[];\r\n    isEditing = (record: any) => {\r\n        return record.key === this.state.editingKey;\r\n    };\r\n    edit(key: string) {\r\n        this.setState({ editingKey: key });\r\n    }\r\n    save(form: any, key: string) {\r\n        form.validateFields((error: any, row: any) => {\r\n            if (error) {\r\n                return;\r\n            }\r\n            const newData = [...this.state.data];\r\n            const index = newData.findIndex(item => key === item.key);\r\n            if (index > -1) {\r\n                const item = newData[index];\r\n                newData.splice(index, 1, {\r\n                    ...item,\r\n                    ...row,\r\n                });\r\n                this.setState({ data: newData, editingKey: '' });\r\n            } else {\r\n                newData.push(data);\r\n                this.setState({ data: newData, editingKey: '' });\r\n            }\r\n        });\r\n    }\r\n    cancel = () => {\r\n        this.setState({ editingKey: '' });\r\n    };\r\n    render() {\r\n        const components = {\r\n            body: {\r\n                row: EditableFormRow,\r\n                cell: EditableCell,\r\n            },\r\n        };\r\n\r\n        const columns = this.columns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: (record: any) => ({\r\n                    record,\r\n                    inputType: col.dataIndex === 'age' ? 'number' : 'text',\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    editing: this.isEditing(record),\r\n                }),\r\n            };\r\n        });\r\n\r\n        return (\r\n            <Table\r\n                components={components}\r\n                bordered\r\n                dataSource={this.state.data}\r\n                columns={columns}\r\n                rowClassName={(record: any, index: number) => 'editable-row'}\r\n            />\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}