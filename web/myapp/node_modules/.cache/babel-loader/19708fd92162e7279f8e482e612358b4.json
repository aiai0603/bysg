{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDom from 'react-dom';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { objectEqual } from './util';\nimport Tween from './Tween';\nimport ticker from './ticker';\n\nfunction noop() {}\n\nvar perFrame = Math.round(1000 / 60);\nvar objectOrArray = PropTypes.oneOfType([PropTypes.object, PropTypes.array]);\n\nvar TweenOne = function (_Component) {\n  _inherits(TweenOne, _Component);\n\n  _createClass(TweenOne, null, [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(props, _ref) {\n      var prevProps = _ref.prevProps,\n          $self = _ref.$self;\n      var nextState = {\n        prevProps: props\n      };\n\n      if (prevProps && props !== prevProps) {\n        if (!$self.tween && !$self.dom) {\n          $self.updateAnim = true;\n          return nextState;\n        } // 动画处理\n\n\n        var newAnimation = props.animation;\n        var currentAnimation = prevProps.animation;\n        var equal = objectEqual(currentAnimation, newAnimation);\n\n        if (!equal) {\n          if (props.resetStyle && $self.tween) {\n            $self.tween.resetDefaultStyle();\n          }\n\n          $self.updateAnim = true;\n        } // 跳帧事件 moment;\n\n\n        var nextMoment = props.moment;\n\n        if (typeof nextMoment === 'number' && nextMoment !== prevProps.moment) {\n          if ($self.tween && !$self.updateAnim) {\n            $self.startMoment = nextMoment;\n            $self.startTime = ticker.time;\n\n            if (props.paused) {\n              $self.raf();\n            }\n\n            if ($self.tween.progressTime >= $self.tween.totalTime) {\n              $self.play();\n            }\n          } else {\n            $self.updateAnim = true;\n          }\n        } // 暂停倒放\n\n\n        if ($self.paused !== props.paused || $self.reverse !== props.reverse) {\n          $self.paused = props.paused;\n          $self.reverse = props.reverse;\n\n          if ($self.paused) {\n            $self.cancelRequestAnimationFrame();\n          } else if ($self.reverse && props.reverseDelay) {\n            $self.cancelRequestAnimationFrame();\n            ticker.timeout($self.restart, props.reverseDelay);\n          } else {\n            // 在 form 状态下，暂停时拉 moment 时，start 有值恢复播放，在 delay 的时间没有处理。。\n            if ($self.tween) {\n              $self.tween.resetAnimData();\n              $self.tween.resetDefaultStyle();\n            }\n\n            if (!$self.updateAnim) {\n              $self.restart();\n            }\n          }\n        }\n\n        var styleEqual = objectEqual(prevProps.style, props.style);\n\n        if (!styleEqual) {\n          // 在动画时更改了 style, 作为更改开始数值。\n          if ($self.tween) {\n            $self.tween.reStart(props.style, prevProps.style, $self.tween.progressTime < $self.tween.totalTime);\n\n            if ($self.paused) {\n              $self.raf();\n            }\n          }\n        }\n\n        $self.setForcedJudg(props);\n      }\n\n      return nextState; // eslint-disable-line\n    }\n  }]);\n\n  function TweenOne(props) {\n    _classCallCheck(this, TweenOne);\n\n    var _this = _possibleConstructorReturn(this, (TweenOne.__proto__ || Object.getPrototypeOf(TweenOne)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    _this.rafID = -1;\n    _this.paused = props.paused;\n    _this.reverse = props.reverse;\n    _this.updateAnim = false;\n    _this.repeatNum = 0;\n    _this.forced = {};\n    _this.currentRef = null;\n\n    _this.setForcedJudg(props);\n\n    _this.state = {\n      $self: _this\n    };\n    return _this;\n  }\n\n  _createClass(TweenOne, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.dom = ReactDom.findDOMNode(this);\n\n      if (this.dom && this.dom.nodeName !== '#text') {\n        this.start();\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      if (!this.dom) {\n        this.dom = ReactDom.findDOMNode(this);\n      } // 样式更新了后再执行动画；\n\n\n      if (this.updateAnim && this.dom && this.dom.nodeName !== '#text') {\n        if (this.tween) {\n          this.cancelRequestAnimationFrame();\n        }\n\n        this.start();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.cancelRequestAnimationFrame();\n    }\n    /**\n     * @method setForcedJudg\n     * @param props\n     * QueueAnim 套在组件下面后导至子级变化。\n     * <QueueAnim component={Menu} >\n     *   <SubMenu key=\"a\" title=\"导航\">\n     *     <Item />\n     *   </SubMenu>\n     * </QueueAnim>\n     * rc-Menu 里是以 isXXX 来判断是 rc-Menu 的子级;\n     * 如: 用 isSubMenu 来处理 hover 事件\n     * 地址: https://github.com/react-component/menu/blob/master/src/MenuMixin.js#L172\n     * 暂时方案: 在组件里添加判断用的值。\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          animation = _props.animation,\n          component = _props.component,\n          componentProps = _props.componentProps,\n          reverseDelay = _props.reverseDelay,\n          attr = _props.attr,\n          paused = _props.paused,\n          reverse = _props.reverse,\n          repeat = _props.repeat,\n          yoyo = _props.yoyo,\n          moment = _props.moment,\n          resetStyle = _props.resetStyle,\n          forcedJudg = _props.forcedJudg,\n          props = _objectWithoutProperties(_props, ['animation', 'component', 'componentProps', 'reverseDelay', 'attr', 'paused', 'reverse', 'repeat', 'yoyo', 'moment', 'resetStyle', 'forcedJudg']);\n\n      Object.keys(props.style || {}).forEach(function (p) {\n        if (p.match(/filter/i)) {\n          ['Webkit', 'Moz', 'Ms', 'ms'].forEach(function (prefix) {\n            props.style[prefix + 'Filter'] = props.style[p];\n          });\n        }\n      }); // component 为空时调用子级的。。\n\n      var className = props.className,\n          children = props.children;\n\n      if (!component && typeof children !== 'string') {\n        if (!children) {\n          return children;\n        }\n\n        var childrenProps = children.props;\n\n        var _ref2 = childrenProps || {},\n            childStyle = _ref2.style,\n            childClass = _ref2.className; // 合并 style 与 className。\n\n\n        var newStyle = _extends({}, childStyle, props.style);\n\n        var newClassName = className ? className + ' ' + childClass : childClass;\n        return React.cloneElement(children, {\n          style: newStyle,\n          className: newClassName\n        });\n      }\n\n      return React.createElement(component, _extends({\n        ref: function ref(c) {\n          _this2.currentRef = c;\n        }\n      }, props, componentProps));\n    }\n  }]);\n\n  return TweenOne;\n}(Component);\n\nTweenOne.propTypes = {\n  component: PropTypes.any,\n  componentProps: PropTypes.any,\n  animation: objectOrArray,\n  children: PropTypes.any,\n  style: PropTypes.object,\n  paused: PropTypes.bool,\n  reverse: PropTypes.bool,\n  reverseDelay: PropTypes.number,\n  yoyo: PropTypes.bool,\n  repeat: PropTypes.number,\n  moment: PropTypes.number,\n  attr: PropTypes.string,\n  onChange: PropTypes.func,\n  resetStyle: PropTypes.bool,\n  forcedJudg: PropTypes.object\n};\nTweenOne.defaultProps = {\n  component: 'div',\n  componentProps: {},\n  reverseDelay: 0,\n  repeat: 0,\n  attr: 'style',\n  onChange: noop\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this.setForcedJudg = function (props) {\n    Object.keys(_this3.forced).forEach(function (key) {\n      delete _this3[key];\n      delete _this3.forced[key];\n    });\n\n    if (props.forcedJudg) {\n      Object.keys(props.forcedJudg).forEach(function (key) {\n        if (!_this3[key]) {\n          _this3[key] = props.forcedJudg[key];\n          _this3.forced[key] = 1;\n        }\n      });\n    }\n  };\n\n  this.setDefault = function (props) {\n    _this3.moment = props.moment || 0;\n    _this3.startMoment = props.moment || 0;\n    _this3.startTime = ticker.time;\n  };\n\n  this.restart = function () {\n    if (!_this3.tween) {\n      return;\n    }\n\n    _this3.startMoment = _this3.moment;\n    _this3.startTime = ticker.time;\n    _this3.tween.reverse = _this3.reverse;\n    _this3.tween.reverseStartTime = _this3.startMoment;\n\n    _this3.raf();\n\n    _this3.play();\n  };\n\n  this.start = function () {\n    _this3.updateAnim = false;\n    var props = _this3.props;\n\n    if (props.animation && Object.keys(props.animation).length) {\n      _this3.setDefault(props);\n\n      _this3.tween = new Tween(_this3.dom, props.animation, props.attr);\n      _this3.tween.reverse = _this3.reverse; // 预先注册 raf, 初始动画数值。\n\n      _this3.raf(); // 开始动画\n\n\n      _this3.play();\n    } else {\n      _this3.tween = null;\n    }\n  };\n\n  this.play = function () {\n    _this3.cancelRequestAnimationFrame();\n\n    if (_this3.paused) {\n      return;\n    }\n\n    _this3.rafID = ticker.add(_this3.raf);\n  };\n\n  this.frame = function () {\n    var yoyo = _this3.props.yoyo;\n    var repeat = _this3.props.repeat;\n    var totalTime = repeat === -1 ? Number.MAX_VALUE : _this3.tween.totalTime * (repeat + 1);\n    repeat = repeat >= 0 ? repeat : Number.MAX_VALUE;\n    var moment = ticker.time - _this3.startTime + _this3.startMoment;\n\n    if (_this3.reverse) {\n      moment = (_this3.startMoment || 0) - (ticker.time - _this3.startTime);\n    }\n\n    moment = moment > totalTime ? totalTime : moment;\n    moment = moment <= 0 ? 0 : moment;\n    var repeatNum = Math.floor(moment / _this3.tween.totalTime) || 0;\n    repeatNum = repeatNum > repeat ? repeat : repeatNum;\n    var tweenMoment = moment - _this3.tween.totalTime * repeatNum;\n    tweenMoment = tweenMoment < perFrame && !_this3.reverse && totalTime >= perFrame ? 0 : tweenMoment;\n\n    if (repeat && moment && moment - _this3.tween.totalTime * repeatNum < perFrame) {\n      // 在重置样式之前补 complete；\n      _this3.tween.frame(_this3.tween.totalTime * repeatNum);\n    }\n\n    if (moment < _this3.moment && !_this3.reverse || repeat !== 0 && repeatNum && repeatNum !== _this3.repeatNum) {\n      // 在 form 状态下，暂停时拉 moment 时，start 有值，，往返方向播放时，在 delay 的时间没有处理。。\n      // 与上面的处理一样，删除 start ，重新走一遍 start。。\n      _this3.tween.resetAnimData();\n\n      _this3.tween.resetDefaultStyle();\n    }\n\n    var yoyoReverse = yoyo && repeatNum % 2;\n\n    if (yoyoReverse) {\n      tweenMoment = _this3.tween.totalTime - tweenMoment;\n    }\n\n    _this3.tween.onChange = function (e) {\n      var cb = _extends({}, e, {\n        timelineMode: ''\n      });\n\n      if (_this3.moment === _this3.startMoment && !_this3.reverse && !e.index && e.mode === 'onStart' || _this3.reverse) {\n        cb.timelineMode = 'onTimelineStart';\n      } else if (moment >= totalTime && !_this3.reverse || !moment && _this3.reverse) {\n        cb.timelineMode = 'onTimelineComplete';\n      } else if (repeatNum !== _this3.timelineRepeatNum) {\n        cb.timelineMode = 'onTimelineRepeat';\n      } else {\n        cb.timelineMode = 'onTimelineUpdate';\n      }\n\n      _this3.timelineRepeatNum = repeatNum;\n\n      _this3.props.onChange(cb);\n    };\n\n    _this3.moment = moment;\n    _this3.repeatNum = repeatNum;\n\n    _this3.tween.frame(tweenMoment);\n  };\n\n  this.raf = function () {\n    var tween = _this3.tween;\n\n    _this3.frame();\n\n    if (tween !== _this3.tween) {\n      // 在 onComplete 时更换动画时，raf 没结束，所以需要强制退出，避逸两个时间的冲突。\n      return null;\n    }\n\n    var repeat = _this3.props.repeat;\n    var totalTime = repeat === -1 ? Number.MAX_VALUE : _this3.tween.totalTime * (repeat + 1);\n\n    if (_this3.moment >= totalTime && !_this3.reverse || _this3.paused || _this3.reverse && _this3.moment === 0) {\n      return _this3.cancelRequestAnimationFrame();\n    }\n\n    return null;\n  };\n\n  this.cancelRequestAnimationFrame = function () {\n    ticker.clear(_this3.rafID);\n    _this3.rafID = -1;\n  };\n};\n\nTweenOne.isTweenOne = true;\nexport default polyfill(TweenOne);","map":null,"metadata":{},"sourceType":"module"}