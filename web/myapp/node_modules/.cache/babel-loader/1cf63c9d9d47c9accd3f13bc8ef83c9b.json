{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport React, { cloneElement } from 'react';\nimport { toArrayChildren, switchChildren } from './utils';\nexport default {\n  across: function across(elem, type, direction, animData, elemOffset, leaveChildHide) {\n    var _x = void 0;\n\n    var props = _extends({}, elem.props);\n\n    var children = props.children;\n\n    if (type === 'enter') {\n      _x = direction === 'next' ? '100%' : '-100%';\n    } else {\n      // 时间轴不同，导致中间有空隙， 等修复 twee-one,先加delay\n      _x = direction === 'next' ? '-100%' : '100%';\n      children = toArrayChildren(children).map(switchChildren.bind(this, leaveChildHide));\n    }\n\n    return cloneElement(elem, {\n      animation: _extends({}, animData, {\n        x: _x,\n        type: type === 'enter' ? 'from' : 'to'\n      })\n    }, children);\n  },\n  vertical: function vertical(elem, type, direction, animData, elemOffset, leaveChildHide) {\n    var _y = void 0;\n\n    var props = _extends({}, elem.props);\n\n    var children = props.children;\n\n    if (type === 'enter') {\n      _y = direction === 'next' ? '-100%' : '100%';\n    } else {\n      // 时间轴不同，导致中间有空隙， 等修复 twee-one,先加delay\n      _y = direction === 'next' ? '100%' : '-100%';\n      children = toArrayChildren(children).map(switchChildren.bind(this, leaveChildHide));\n    }\n\n    return cloneElement(elem, _extends({}, props, {\n      animation: _extends({}, animData, {\n        y: _y,\n        type: type === 'enter' ? 'from' : 'to'\n      })\n    }), children);\n  },\n  acrossOverlay: function acrossOverlay(elem, type, direction, animData, elemOffset, leaveChildHide) {\n    var _x = void 0;\n\n    var props = _extends({}, elem.props);\n\n    var children = props.children;\n\n    if (type === 'enter') {\n      _x = direction === 'next' ? '100%' : '-100%';\n    } else {\n      _x = direction === 'next' ? '-20%' : '20%';\n      children = toArrayChildren(children).map(switchChildren.bind(this, leaveChildHide));\n    }\n\n    return cloneElement(elem, _extends({}, props, {\n      animation: _extends({}, animData, {\n        x: _x,\n        type: type === 'enter' ? 'from' : 'to'\n      })\n    }), children);\n  },\n  verticalOverlay: function verticalOverlay(elem, type, direction, animData, elemOffset, leaveChildHide) {\n    var _y = void 0;\n\n    var props = _extends({}, elem.props);\n\n    var children = props.children;\n\n    if (type === 'enter') {\n      _y = direction === 'next' ? '-100%' : '100%';\n    } else {\n      _y = direction === 'next' ? '20%' : '-20%';\n      children = toArrayChildren(children).map(switchChildren.bind(this, leaveChildHide));\n    }\n\n    return cloneElement(elem, _extends({}, props, {\n      animation: _extends({}, animData, {\n        y: _y,\n        type: type === 'enter' ? 'from' : 'to'\n      })\n    }), children);\n  },\n  gridBar: function gridBar(elem, type, direction, animData, elemOffset, leaveChildHide, ratio, paused) {\n    var props = _extends({}, elem.props);\n\n    var animChild = [];\n    var gridNum = 10;\n    var girdSize = 100 / gridNum;\n\n    var _y = void 0;\n\n    var children = props.children;\n\n    if (type === 'enter') {\n      _y = direction === 'next' ? '-100%' : '100%';\n    } else {\n      _y = direction === 'next' ? '100%' : '-100%';\n    }\n\n    var moment = ratio * (animData.duration + animData.delay + gridNum * 50 - (type === 'enter' ? 50 : 0)) || 0;\n\n    for (var i = 0; i < gridNum; i++) {\n      var style = _extends({}, props.style);\n\n      style.width = girdSize + 0.1 + '%';\n      style.left = i * girdSize + '%';\n      style.position = 'absolute';\n      style.overflow = 'hidden';\n\n      var _style = _extends({}, props.style);\n\n      _style.width = elemOffset.width + 'px';\n      _style.height = elemOffset.height + 'px';\n      _style.float = 'left';\n      _style.position = 'relative';\n      _style.left = -i * girdSize / 100 * elemOffset.width + 'px';\n      _style.overflow = 'hidden';\n\n      var animProps = _extends({}, props);\n\n      animProps.style = _style;\n      var delay = (direction === 'next' ? i : gridNum - i) * 50 + (type === 'enter' ? 0 : 50) + (animData.delay || 0);\n      animProps.animation = _extends({}, animData, {\n        y: _y,\n        type: type === 'enter' ? 'from' : 'to',\n        key: type,\n        direction: direction,\n        delay: delay,\n        i: i,\n        onComplete: i === (direction === 'next' ? gridNum - 1 : 0) ? animData.onComplete : null\n      });\n      animProps.paused = paused;\n      animProps.moment = moment;\n      var mask = React.createElement('div', {\n        style: style,\n        key: i\n      }, cloneElement(elem, animProps, children));\n      animChild.push(mask);\n    }\n\n    var animSlot = React.createElement('div', {\n      style: {\n        width: '100%',\n        position: 'absolute',\n        top: 0\n      }\n    }, animChild);\n\n    var _props = _extends({}, elem.props);\n\n    _props.children = animSlot;\n    return cloneElement(elem, _extends({}, _props, {\n      animation: {\n        x: 0,\n        y: 0,\n        type: 'set'\n      }\n    }));\n  },\n  grid: function grid(elem, type, direction, animData, elemOffset, leaveChildHide, ratio, paused) {\n    var props = _extends({}, elem.props);\n\n    var animChild = [];\n    var gridNum = 10;\n    var gridWidth = elemOffset.width / gridNum;\n    var gridNumH = Math.ceil(elemOffset.height / gridWidth);\n\n    var _delay = (gridNum - 1) * 50 + (gridNumH - 1) * 50;\n\n    if (type === 'leave') {\n      props.animation = _extends({}, animData, {\n        duration: _delay + animData.duration\n      });\n      props.moment = ((animData.delay || 0) + _delay + animData.duration) * ratio || 0;\n      props.paused = paused;\n      return React.cloneElement(elem, props);\n    }\n\n    var moment = ratio * (animData.duration + animData.delay + _delay) || 0;\n\n    for (var i = 0; i < gridNum * gridNumH; i++) {\n      // mask样式\n      var style = _extends({}, props.style);\n\n      style.position = 'absolute';\n      style.overflow = 'hidden';\n      style.width = gridWidth + 1 + 'px';\n      style.height = gridWidth + 1 + 'px';\n      style.left = i % gridNum * gridWidth;\n      style.top = Math.floor(i / gridNum) * gridWidth;\n      style.opacity = 0; // clone 的样式\n\n      var _style = _extends({}, props.style);\n\n      _style.width = elemOffset.width + 'px';\n      _style.height = elemOffset.height + 'px';\n      _style.position = 'relative';\n      _style.left = -i % gridNum * gridWidth;\n      _style.top = -Math.floor(i / gridNum) * gridWidth;\n      _style.overflow = 'hidden';\n      props.style = _style;\n      var delay = direction === 'next' ? i % gridNum * 50 + Math.floor(i / gridNum) * 50 : (gridNum - 1 - i % gridNum) * 50 + (gridNumH - 1 - Math.floor(i / gridNum)) * 50;\n      delay += animData.delay || 0;\n      var length = direction === 'next' ? gridNum * gridNumH - 1 : 0;\n\n      var animation = _extends({}, animData, {\n        opacity: 1,\n        delay: delay,\n        onComplete: i === length ? animData.onComplete : null\n      });\n\n      var mask = React.createElement(elem.type, {\n        style: style,\n        key: i,\n        paused: paused,\n        animation: animation,\n        moment: moment\n      }, cloneElement(elem, props));\n      animChild.push(mask);\n    }\n\n    var _props = _extends({}, elem.props);\n\n    _props.children = animChild;\n    return cloneElement(elem, _extends({}, _props, {\n      animation: {\n        x: 0,\n        y: 0,\n        type: 'set'\n      }\n    }));\n  }\n};","map":null,"metadata":{},"sourceType":"module"}